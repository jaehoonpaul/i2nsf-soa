# _*_coding:utf-8_*_
import json

import logging
import re
from os import path, os

from django.http import JsonResponse
from django.shortcuts import render, redirect
from django.views.decorators.csrf import csrf_exempt

from sdsec.settings import ROOT_DIR, STATIC_DIR
from sdsecgui.tools.ctrlengine import ControlEngine
from sdsecgui.db.soac_query import *
from sdsecgui.db.db_connector import SOAControlDomainDBConnector

import sdsecgui.tools.cfg_api as cfg_api
from sdsecgui.tools.security_controller_restapi import SecurityControllerRestAPI

logger = logging.getLogger("myapp.myLogger")


def createSecurityResourceGroupCapability(request):
    return render(request, 'security/capability_modal.html', {"modal_title": "Capability 직접입력"})


def createSecurityResourceGroup(request):
    logger.info("createSecurityResource")
    token = request.session.get("passToken")
    domain_name = request.session.get("domain_name")
    user_name = request.session.get("user_name")
    if request.is_ajax() and request.method == 'POST':
        data = json.loads(request.POST.get("data"))
        db_nm = request.session.get("domain_db_nm")
        db_user = request.session.get("domain_db_user")
        db_pass = request.session.get("domain_db_pass")
        db_ip = request.session.get("domain_db_ip")
        db_port = request.session.get("domain_db_port")
        conn = SOAControlDomainDBConnector(db_nm=db_nm, db_user=db_user, db_pass=db_pass, db_ip=db_ip, db_port=db_port)
        security_info = data.get("security_info")

        params = (
            security_info.get("security_id"),
            domain_name,
            security_info.get("security_name"),
            security_info.get("security_icon"),
            security_info.get("manufacturer_name"),
            security_info.get("manufacturer_icon"),
            security_info.get("software_version"),
            security_info.get("image_name"),
            json.dumps(data.get("data").get("nodes")),
            json.dumps(data.get("data").get("links")),
            json.dumps(data.get("data").get("security_types")),
            security_info.get("description", ""),
            user_name,
            user_name
        )
        try:
            # print "=============security_icon==============="
            # print security_info.get("security_icon")
            insert_security_resource = conn.insert(INSERT_SECURITY_RESOURCE_GROUP, params)
            if security_info.get("capability_xml"):
                p = re.compile('\<nsf-name\>([^\<]+)\<\/nsf-name\>')
                file_path = path.join(STATIC_DIR, "media")
                logger.info(os.listdir(file_path))
                file_path = path.join(file_path, security_info.get("capability_xml").replace("/files/download/", ""))

                logger.info("\n\n\npath: {}\n\n\n".format(file_path))
                nsf_dict = {
                    "capability_xml": file_path,
                    "user_name": user_name
                }
                with open(file_path, 'r') as f:
                    while True:
                        line = f.readline()
                        if not line:
                            break
                        m = p.search(line)
                        if m:
                            nsf_dict["nsf_name"] = m.group(1)
                            break
                nsf_params = (
                    nsf_dict.get("nsf_name"),
                    nsf_dict.get("capability_xml"),
                    nsf_dict.get("user_name"),
                    nsf_dict.get("user_name")
                )
                insert_nsf = conn.insert(INSERT_NSF_XML, nsf_params)
                scr_api = SecurityControllerRestAPI()
                insert_result = scr_api.insert_nsf(nsf_dict.get("capability_xml"))
                logger.info("\n\n\ncall result: {}\n\n\n".format(insert_result))

            if data.get("nsf"):
                # nsf 생성(nsf, capability, field)
                nsf_params = json.loads(data.get("nsf"))
                nsf_params["user_name"] = user_name
                insert_nsf, nsf_key = conn.insert_nsf(nsf_params)
            insert_result = {"success": {"message": u"보안서비스로 등록되었습니다.", "title": "성공"}}
        except Exception as e:
            insert_result = {"error": {"message": str(e), "title": "error"}}
        return JsonResponse(insert_result)
    else:
        if not token:
            return redirect("/dashboard/domains/?next=/dashboard/security/create")
        return render(request, 'security/info.html', {"title": u"등록"})


def modify_security_resource_group(request, security_id):
    logger.info("modifySecurityResource")
    token = request.session.get("passToken")
    domain_name = request.session.get("domain_name")
    user_name = request.session.get("user_name")
    if request.method == 'POST':
        data = json.loads(request.POST.get("data"))
        db_nm = request.session.get("domain_db_nm")
        db_user = request.session.get("domain_db_user")
        db_pass = request.session.get("domain_db_pass")
        db_ip = request.session.get("domain_db_ip")
        db_port = request.session.get("domain_db_port")
        conn = SOAControlDomainDBConnector(db_nm=db_nm, db_user=db_user, db_pass=db_pass, db_ip=db_ip, db_port=db_port)
        security_info = data.get("security_info")

        params = (
            security_info.get("security_name"),
            security_info.get("security_icon"),
            security_info.get("description"),
            security_info.get("manufacturer_name"),
            security_info.get("manufacturer_icon"),
            security_info.get("software_version"),
            security_info.get("image_name"),
            json.dumps(data.get("data").get("nodes")),
            json.dumps(data.get("data").get("links")),
            json.dumps(data.get("data").get("security_types")),
            user_name,
            security_id
        )
        # print UPDATE_SECURITY_RESOURCE_GROUP, params
        security_resource_list = conn.update(UPDATE_SECURITY_RESOURCE_GROUP, params)

        if data.get("nsf"):
            # nsf 생성(nsf, capability, field)
            nsf_params = json.loads(data.get("nsf"))
            nsf_params["user_name"] = user_name
            insert_nsf, nsf_key = conn.insert_nsf(nsf_params)
        result = {"success": {"security_resources": security_resource_list}}

        return JsonResponse(result)
    else:
        if not token:
            return redirect("/dashboard/domains/?next=/dashboard/security/modify")
        return render(request, 'security/info.html', {"title": "수정", "security_id": security_id})


# @login_required(login_url='/dashboard')
@csrf_exempt
def get_security_resource_list(request):
    logger.info("get_security_resource_list")
    token = request.session.get('passToken')
    domain_name = request.session.get("domain_name")
    db_nm = request.session.get("domain_db_nm")
    db_user = request.session.get("domain_db_user")
    db_pass = request.session.get("domain_db_pass")
    db_ip = request.session.get("domain_db_ip")
    db_port = request.session.get("domain_db_port")
    conn = SOAControlDomainDBConnector(db_nm=db_nm, db_user=db_user, db_pass=db_pass, db_ip=db_ip, db_port=db_port)
    security_resource_list = conn.select(SELECT_SECURITY_RESOURCE_GROUP_LIST)
    for security_resource in security_resource_list:
        security_resource["data"] = {
            "nodes": security_resource.get("topology_json"),
            "links": security_resource.get("link_json"),
            "security_types": security_resource.get("security_json")
        }
    if request.method == 'POST':
        result = {"success": {"security_resources": security_resource_list}}

        return JsonResponse(result)
    else:
        if not token:
            return redirect("/dashboard/domains/?next=/dashboard/security/")
        return render(request, 'security/index.html', {"security_resources": security_resource_list})


def delete_security_resource(request, security_id):
    logger.info("delete_security_resource")
    domain_name = request.session.get("domain_name")
    if request.method == 'POST':
        db_nm = request.session.get("domain_db_nm")
        db_user = request.session.get("domain_db_user")
        db_pass = request.session.get("domain_db_pass")
        db_ip = request.session.get("domain_db_ip")
        db_port = request.session.get("domain_db_port")
        conn = SOAControlDomainDBConnector(db_nm=db_nm, db_user=db_user, db_pass=db_pass, db_ip=db_ip, db_port=db_port)
        delete_security_resource = conn.delete(DELETE_SECURITY_RESOURCE_GROUP, (security_id))
        result = {"success": {"message": "보안서비스를 삭제했습니다.", "title": "성공"}}
        return JsonResponse(result)


def get_security_resource(request, security_id):
    logger.info("get_security_resource")
    token = request.session.get("passToken")
    domain_name = request.session.get("domain_name")
    if request.is_ajax() and request.method == 'POST':
        db_nm = request.session.get("domain_db_nm")
        db_user = request.session.get("domain_db_user")
        db_pass = request.session.get("domain_db_pass")
        db_ip = request.session.get("domain_db_ip")
        db_port = request.session.get("domain_db_port")
        conn = SOAControlDomainDBConnector(db_nm=db_nm, db_user=db_user, db_pass=db_pass, db_ip=db_ip, db_port=db_port)
        params = (security_id)
        try:
            select_security_resource = conn.select(SELECT_SECURITY_RESOURCE_GROUP, params)
            if len(select_security_resource) > 0:
                security_resource = select_security_resource[0]
                security_resource["data"] = {
                    "nodes": security_resource.get("topology_json"),
                    "links": security_resource.get("link_json"),
                    "security_types": security_resource.get("security_json")
                }
                result = {
                    "success": {
                        "security_resource": security_resource
                    }
                }
            else:
                raise Exception(security_id + "은 존재하지 않습니다.")
        except Exception as e:
            result = {"error": {"message": str(e), "title": "error"}}
        return JsonResponse(result)
    else:
        if not token:
            return redirect("/dashboard/domains")
        return render(request, 'security/info.html', {"title": "조회", "security_id": security_id})


@csrf_exempt
def get_security_group_info(request):
    token = request.session.get("passToken")
    domain_name = request.session.get("domain_name")
    project_name = request.session.get("project_name")
    user_name = request.session.get("user_name")
    if request.method == "POST":
        data = request.POST.get("data")
        control = ControlEngine(request.session.get("ctrl_header"))
        data = json.loads(data)
        service_id = data.get("service_id")
        server_id = data.get("server_id")
        service_info = control.get_service_vm(service_id) # service_id 에 해당하는 서비스에 속한 서버 리스트 반환
        if service_info.get("success"):
            # print "=============success보안장비정보=================="
            # print "service_id: ", service_id, "server_id: ", server_id
            # print "data", data
            vmList = service_info["success"].get("vm_list")
            vm_name_list = [vm.get("vm_name") for vm in vmList if vm.get("vm_id") == server_id]
            if len(vm_name_list) != 0:
                searchVmName = vm_name_list[0]
                smap_data = control.get_map(service_id)
                if smap_data.get("success"):
                    map_data = smap_data.get("success").get("map_data")
                    used_security_group_list = map_data.get("used_security_group_list")  # service_id에 해당하는 맵데이터에서 사용한 보안장비찾기
                    if used_security_group_list:
                        print "used_security_group_list: ", used_security_group_list
                        used_security_group_id_list = []
                        for used_security_group in used_security_group_list:
                            if used_security_group.get("vm_name") == searchVmName:  # 사용된 보안장비의 가상서버 목록중 같은 이름이 있는지 확인
                                used_security_group_id_list.append(used_security_group["security_id"]) # 위조건에 만족한 보안장비 id저장
                        # print "used_security_group_id_list: ", used_security_group_id_list
                        if len(used_security_group_id_list) > 0:
                            used_security_group_id = used_security_group_id_list[0]  # 저장된 보안장비 ID로 db에서 정보찾기
                            db_nm = request.session.get("domain_db_nm")
                            db_user = request.session.get("domain_db_user")
                            db_pass = request.session.get("domain_db_pass")
                            db_ip = request.session.get("domain_db_ip")
                            db_port = request.session.get("domain_db_port")
                            conn = SOAControlDomainDBConnector(db_nm=db_nm, db_user=db_user, db_pass=db_pass, db_ip=db_ip, db_port=db_port)
                            params = (used_security_group_id)
                            try:
                                select_security_resource = conn.select(SELECT_SECURITY_RESOURCE_GROUP, params)
                                if len(select_security_resource) > 0:
                                    security_resource = select_security_resource[0]
                                    security_resource["data"] = {
                                        "nodes": security_resource.get("topology_json"),
                                        "links": security_resource.get("link_json"),
                                        "security_types": security_resource.get("security_json")
                                    }
                                    result = {"success": {"security_resource": security_resource}}
                                else:
                                    raise Exception(used_security_group_id + u"은 존재하지 않습니다.")
                            except Exception as e:
                                result = {"error": {"message": str(e), "title": "error"}}
                    else:
                        result = {"error": {"message": "해당 서버에는 보안정보가 없습니다.", "title": "error"}}
                else:
                    result = {"error": {"message": "해당 서비스에는 보안정보가 없습니다.", "title": "error"}}
            else:
                result = {"error": {"message": "해당 서버가 없습니다.", "title": "error"}}
        elif service_info.get("error"):
            result = service_info.get("error")
        else:
            # print "=============error보안장비정보=================="
            result = {"error": {"message": u"잘못된 아이디", "title": "error"}}

        return JsonResponse(result)
    else:
        response = render('404.html', {})
        response.status_code = 404
        return response