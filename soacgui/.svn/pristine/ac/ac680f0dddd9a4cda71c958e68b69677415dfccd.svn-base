# _*_coding:utf-8_*_
import json


import logging

from django.http import JsonResponse
from django.shortcuts import render, redirect

from sdsecgui.tools.openstack_restapi import HeatRestAPI, NeutronRestAPI
from sdsecgui.db.db_connector import SOAControlDBConnector
from sdsecgui.tools.security_controller_restapi import SecurityControllerRestAPI
from sdsecgui.db.soac_query import *

logger = logging.getLogger("myapp.myLogger")


def new_service(request):
    if request.method == "GET":
        json_param = {
            "ietf-i2nsf-cfi-policy:policy": {
                "endpoint-group": {
                    "user-group": [{
                        "name": "employees",
                        "range-ip-address": [{
                            "start-ip-address": "221.159.112.1",
                            "end-ip-address": "221.159.112.90"
                        }]
                    }]
                }
            }
        }

        sec_ctrl = SecurityControllerRestAPI()
        # result = sec_ctrl.test_security_controller()
        return render(request, "service/intent/new_service.html", {})
    elif request.is_ajax() and request.method == 'POST':
        logger.info("newServicePOST")
        token = request.session.get("passToken")
        auth_url = request.session.get("auth_url")
        domain_name = request.session.get("domain_name")
        rule_key = request.POST.get("rule_key")

        conn = SOAControlDBConnector.getInstance()

        params = (domain_name, rule_key)
        rule = conn.select_one(SELECT_FW_RULE, params)
        logger.info("rule_key {}, rule {}".format(rule_key, rule))

        params = (domain_name, rule.get("source_target"))
        src = conn.select_one(SELECT_ENDPOINT, params)
        params = (domain_name, rule.get("destination_target"))
        dest = conn.select_one(SELECT_ENDPOINT, params)

        endpoint_group = {"user-group": [{"name": src.get("name"), "range-ip-address": json.loads(src.get("metadata"))}]}

        e_type = dest.get("endpoint_type")
        metadata_key = "url" if e_type == "url" else "range-ip-address"
        endpoint_group[e_type + "-group"] = [{"name": dest.get("name"), metadata_key: json.loads(dest.get("metadata"))}]
        json_param = {
            "ietf-i2nsf-cfi-policy:policy": {
                "policy-name": json.dumps(rule.get("policy_name")),
                "endpoint-group": json.dumps(endpoint_group)
            }
        }
        json_param = {
            "ietf-i2nsf-cfi-policy:policy": {
                "policy-name": "policy_name1",
                "rule": [
                    {
                        "rule-name": "rule_name1",
                        "condition": {
                            "firewall-condition": {
                                "source-target": {
                                    "src-target": "user-policy1"
                                }
                            },
                            "custom-condition": {
                                "destination-target": {
                                    "dest-target": "url-policy1"
                                }
                            }
                        },
                        "event": {
                            "time-information": {
                                "begin-time": "01:00",
                                "end-time": "21:00"
                            }
                        },
                        "action": {
                            "primary-action": "drop"
                        }
                    }
                ]
            }
        }

        sec_ctrl = SecurityControllerRestAPI()
        # result = sec_ctrl.test_security_controller()
        result = sec_ctrl.get_service_template_by_rule(json_param)
        logger.info("result: {}, type: {}".format(result, type(result)))
        # if result.get("error"):
        #     return JsonResponse(result)
        # else:
        template_key = result.get("template_key")
        template_key = 3
        params = (template_key)
        service_template = conn.select_one(SELECT_SERVICE_TEMPLATE, params)
        params = (template_key, domain_name)
        security_types = conn.select_one(SELECT_SECURITY_RESOURCE_GROUP_BY_TEMPLATE_KEY, params)
        link_json = service_template.get("link_json").replace("\\", "")
        links = json.loads(link_json).get("links", [])
        as_links = json.loads(link_json).get("asLinks", [])
        resources = json.loads(link_json).get("resources", [])
        security_types = json.loads(link_json).get("security_types", [])

        logger.info("newServicePOST_end_getpublic_network")
        neutron = NeutronRestAPI(auth_url, token)
        result = neutron.get_network_list()
        if result.get("success"):
            public_network = filter(lambda network: network["router:external"], result["success"]["networks"])
            logger.info("#######topology_json: {}\ntype: {}".format(service_template.get("topology_json"), type(service_template.get("topology_json"))))
            json_data = {
                'success': {
                    "service_detail": json.loads(service_template.get("topology_json"))
                },
                "asLinks": as_links,
                "public_network": public_network,
                "service_template": service_template,
                "security_types": security_types,
                "links": links
            }
            return JsonResponse(json_data)
        else:
            return JsonResponse(result)


def get_rule_list(request):
    token = request.session.get('passToken')
    if not token:
        response = redirect("/dashboard")
    else:
        domain_name = request.session.get("domain_name")
        conn = SOAControlDBConnector.getInstance()
        params = (domain_name)
        rules = conn.select(SELECT_FW_RULE_LIST, params)
        response = render(request, "service/intent/rule/index.html", {"rules": rules})
    return response


def get_rule(request, rule_key):
    domain_name = request.session.get("domain_name")
    conn = SOAControlDBConnector.getInstance()

    params = (domain_name, rule_key)
    rule = conn.select_one(SELECT_FW_RULE, params)

    params = (domain_name, rule.get("source_target"))
    src = conn.select_one(SELECT_ENDPOINT, params)
    if src:
        src_range = json.loads(src.get("metadata"))[0]
        src["range"] = src_range.get("start-ip-address") + " ~ " + src_range.get("end-ip-address")

    params = (domain_name, rule.get("destination_target"))
    dest = conn.select_one(SELECT_ENDPOINT, params)
    if dest:
        if dest.get("endpoint_type") == 'url':
            urls = json.loads(dest.get("metadata"))
            cnt = 0
            dest["range"] = ""
            for url in urls:
                if cnt > 0:
                    dest["range"] += ", "
                dest["range"] += url
                cnt += 1
        else:
            dest_range = json.loads(dest.get("metadata"))[0]
            dest["range"] = dest_range.get("start-ip-address") + " ~ " + dest_range.get("end-ip-address")

    rule["source_target"] = src
    rule["destination_target"] = dest

    return render(request, "service/intent/rule/info.html", {"rule": rule})


def create_rule(request):
    domain_name = request.session.get("domain_name")
    user_name = request.session.get("user_name")
    if request.method == "GET":
        conn = SOAControlDBConnector.getInstance()
        params = (domain_name)
        endpoints = conn.select(SELECT_ENDPOINT_LIST, params)

        src_list = []
        dest_list = []
        for endpoint in endpoints:
            if endpoint.get("endpoint_type") == 'url':
                urls = json.loads(endpoint.get("metadata"))
                cnt = 0
                endpoint["range"] = ""
                for url in urls:
                    if cnt > 0:
                        endpoint["range"] += ", "
                    endpoint["range"] += url
                    cnt += 1
            else:
                range = json.loads(endpoint.get("metadata"))[0]
                endpoint["range"] = range.get("start-ip-address") + " ~ " + range.get("end-ip-address")

            if endpoint.get("endpoint_type") == "user":
                src_list.append(endpoint)
            else:
                dest_list.append(endpoint)
        resp_data = {
            "modal_title": request.GET.get("modal_title"),
            "source_target": src_list,
            "destination_target": dest_list
        }
        return render(request, 'service/intent/rule/create_modal.html', resp_data)
    elif request.method == "POST":
        conn = SOAControlDBConnector.getInstance()
        params = (
            domain_name,
            request.POST.get("policy_name"),
            request.POST.get("source_target"),
            request.POST.get("destination_target"),
            request.POST.get("start_time"),
            request.POST.get("end_time"),
            request.POST.get("action_data"),
            request.POST.get("description"),
            user_name,
            user_name
        )
        result = conn.insert(INSERT_FW_RULE, params)
        return JsonResponse({"result": result})


def update_rule(request, rule_key):
    domain_name = request.session.get("domain_name")
    user_name = request.session.get("user_name")
    if request.method == "GET":
        conn = SOAControlDBConnector.getInstance()
        params = (domain_name, rule_key)
        rule = conn.select_one(SELECT_FW_RULE, params)
        params = (domain_name)
        endpoints = conn.select(SELECT_ENDPOINT_LIST, params)

        src_list = []
        dest_list = []
        for endpoint in endpoints:
            if endpoint.get("endpoint_type") == 'url':
                urls = json.loads(endpoint.get("metadata"))
                cnt = 0
                endpoint["range"] = ""
                for url in urls:
                    if cnt > 0:
                        endpoint["range"] += ", "
                    endpoint["range"] += url
                    cnt += 1
            else:
                range = json.loads(endpoint.get("metadata"))[0]
                endpoint["range"] = range.get("start-ip-address") + " ~ " + range.get("end-ip-address")

            if endpoint.get("endpoint_type") == "user":
                src_list.append(endpoint)
            else:
                dest_list.append(endpoint)

        resp_data = {
            "modal_title": request.GET.get("modal_title"),
            "rule": rule,
            "source_target": src_list,
            "destination_target": dest_list
        }
        return render(request, 'service/intent/rule/create_modal.html', resp_data)
    elif request.method == "POST":
        conn = SOAControlDBConnector.getInstance()
        params = (
            request.POST.get("policy_name"),
            request.POST.get("source_target"),
            request.POST.get("destination_target"),
            request.POST.get("start_time"),
            request.POST.get("end_time"),
            request.POST.get("action_data"),
            request.POST.get("description"),
            user_name,
            domain_name,
            rule_key
        )
        rule = conn.update(UPDATE_FW_RULE, params)
        return JsonResponse({"success": True})


def delete_rule(request, rule_key):
    domain_name = request.session.get("domain_name")
    if request.method == "POST":
        conn = SOAControlDBConnector.getInstance()
        params = (domain_name, rule_key)
        rule = conn.update(DELETE_FW_RULE, params)
        return JsonResponse({"success": True})


# 병천 수정한 곳 여기부터
# endpoint 리스트 얻어오는 부분
def get_endpoint_list(request):
    token = request.session.get('passToken')
    if not token:
        response = redirect("/dashboard")
    else:
        domain_name = request.session.get("domain_name")
        conn = SOAControlDBConnector.getInstance()
        params = (domain_name)
        endpoints = conn.select(SELECT_ENDPOINT_LIST, params)
        response = render(request, "service/intent/endpoint/index.html", {"endpoints": endpoints})
    return response


# endpoint 수정 삭제 되게
def update_endpoint(request, endpoint_key):
    domain_name = request.session.get("domain_name")
    conn = SOAControlDBConnector.getInstance()
    params = (
        domain_name,
        endpoint_key
    )
    endpoint = conn.select_one(SELECT_ENDPOINT, params)
    metadata = json.loads(endpoint.get("metadata"))
    if endpoint.get("endpoint_type") == "url":
        url_str = ""
        cnt = 0
        for url in metadata:
            if cnt > 0:
                url_str += ", "
            url_str += url
            cnt += 1
        endpoint["urls"] = url_str
    else:
        endpoint["start_ip_address"] = metadata[0].get("start-ip-address")
        endpoint["end_ip_address"] = metadata[0].get("end-ip-address")

    return render(request, 'service/intent/endpoint/endpoint_modal.html', {"endpoint": endpoint})


def delete_endpoint(request, endpoint_key):
    domain_name = request.session.get("domain_name")
    if request.method == "POST":
        conn = SOAControlDBConnector.getInstance()
        params = (domain_name, endpoint_key)
        endpoint = conn.update(DELETE_ENDPOINT, params)
        return JsonResponse({"success": True})


def endpoint_settings(request):
    if request.method == "GET":
        domain_name = request.session.get("domain_name")
        conn = SOAControlDBConnector.getInstance()
        params = (domain_name)
        endpoints = conn.select(SELECT_ENDPOINT_LIST, params)
        return render(request, "service/intent/endpoint/index.html", {"endpoints": endpoints})


def create_endpoint(request):
    user_name = request.session.get("user_name")
    domain_name = request.session.get("domain_name")
    if request.is_ajax() and request.method == "POST":
        scr_api = SecurityControllerRestAPI()
        insert_result = scr_api.insert_endpoint(request.POST.get("metadata"))
        if "Success" in insert_result:
            conn = SOAControlDBConnector.getInstance()
            params = (
                domain_name,
                request.POST.get("name"),
                request.POST.get("metadata"),
                request.POST.get("endpoint_type"),
                user_name,
                user_name
            )
            result = conn.insert(INSERT_ENDPOINT, params)
        return JsonResponse({"result": insert_result})
    else:
        return render(request, 'service/intent/endpoint/create_modal.html', {})

# 병천 수정한 곳 여기까지
